import { DataSource } from 'typeorm';
import { Role, Grade, Subject, Person, User } from '../../entities';
import * as bcrypt from 'bcrypt';

export async function seedInitialData(dataSource: DataSource) {
  console.log('üå± Iniciando seeds...');

  // Repositorios
  const roleRepository = dataSource.getRepository(Role);
  const gradeRepository = dataSource.getRepository(Grade);
  const subjectRepository = dataSource.getRepository(Subject);
  const personRepository = dataSource.getRepository(Person);
  const userRepository = dataSource.getRepository(User);

  try {
    // 1. Insertar Roles
    console.log('üìã Creando roles...');
    const roles = [
      { name: 'admin', description: 'Administrador del sistema - acceso completo' },
      { name: 'director', description: 'Director del centro educativo - acceso completo' },
      { name: 'profesor', description: 'Profesor - gestiona cursos y estudiantes asignados' },
      { name: 'padre', description: 'Padre de familia - acceso a informaci√≥n de sus hijos' },
    ];

    for (const roleData of roles) {
      const existingRole = await roleRepository.findOne({ where: { name: roleData.name } });
      if (!existingRole) {
        const role = roleRepository.create(roleData);
        await roleRepository.save(role);
        console.log(`‚úÖ Rol creado: ${roleData.name}`);
      } else {
        console.log(`‚ö†Ô∏è  Rol ya existe: ${roleData.name}`);
      }
    }

    // 2. Insertar Grados
    console.log('üéì Creando grados acad√©micos...');
    const grades = [
      { name: 'Jard√≠n 3 a√±os', level: 'inicial', ageGroup: '3 a√±os', description: 'Nivel inicial para ni√±os de 3 a√±os' },
      { name: 'Jard√≠n 4 a√±os', level: 'inicial', ageGroup: '4 a√±os', description: 'Nivel inicial para ni√±os de 4 a√±os' },
      { name: 'Jard√≠n 5 a√±os', level: 'inicial', ageGroup: '5 a√±os', description: 'Nivel inicial para ni√±os de 5 a√±os' },
      { name: '1¬∞ Primaria', level: 'primaria', ageGroup: '6 a√±os', description: 'Primer grado de primaria' },
      { name: '2¬∞ Primaria', level: 'primaria', ageGroup: '7 a√±os', description: 'Segundo grado de primaria' },
    ];

    for (const gradeData of grades) {
      const existingGrade = await gradeRepository.findOne({ where: { name: gradeData.name } });
      if (!existingGrade) {
        const grade = gradeRepository.create(gradeData);
        await gradeRepository.save(grade);
        console.log(`‚úÖ Grado creado: ${gradeData.name}`);
      } else {
        console.log(`‚ö†Ô∏è  Grado ya existe: ${gradeData.name}`);
      }
    }

    // 3. Insertar Materias
    console.log('üìö Creando materias...');
    const subjects = [
      { name: 'Matem√°tica', code: 'MAT', description: 'Matem√°tica b√°sica y n√∫meros' },
      { name: 'Comunicaci√≥n', code: 'COM', description: 'Lenguaje y comunicaci√≥n integral' },
      { name: 'Ciencia y Ambiente', code: 'CTA', description: 'Ciencias naturales y cuidado del ambiente' },
      { name: 'Personal Social', code: 'PS', description: 'Desarrollo personal y social' },
      { name: 'Ingl√©s', code: 'ING', description: 'Idioma ingl√©s b√°sico' },
      { name: 'Educaci√≥n F√≠sica', code: 'EF', description: 'Actividad f√≠sica y deportes' },
      { name: 'Arte', code: 'ART', description: 'Educaci√≥n art√≠stica y creatividad' },
      { name: 'Religi√≥n', code: 'REL', description: 'Educaci√≥n religiosa y valores' },
      { name: 'Computaci√≥n', code: 'COMP', description: 'Introducci√≥n a la tecnolog√≠a' },
      { name: 'Psicomotricidad', code: 'PSICO', description: 'Desarrollo psicomotor' },
    ];

    for (const subjectData of subjects) {
      const existingSubject = await subjectRepository.findOne({ where: { code: subjectData.code } });
      if (!existingSubject) {
        const subject = subjectRepository.create(subjectData);
        await subjectRepository.save(subject);
        console.log(`‚úÖ Materia creada: ${subjectData.name}`);
      } else {
        console.log(`‚ö†Ô∏è  Materia ya existe: ${subjectData.name}`);
      }
    }

    // 4. Crear usuario administrador inicial
    console.log('üë§ Creando usuario administrador...');
    const adminRole = await roleRepository.findOne({ where: { name: 'admin' } });
    
    if (adminRole) {
      const existingAdmin = await userRepository.findOne({ where: { username: 'admin' } });
      
      if (!existingAdmin) {
        // Crear persona para el admin
        const adminPerson = personRepository.create({
          firstName: 'Administrador',
          lastName: 'Sistema',
          documentType: 'DNI',
          documentNumber: '00000000',
          email: 'admin@nidopro.com',
          phone: '999999999',
        });
        await personRepository.save(adminPerson);

        // Crear usuario admin
        const hashedPassword = await bcrypt.hash('admin123', 10);
        const adminUser = userRepository.create({
          personId: adminPerson.id,
          roleId: adminRole.id,
          username: 'admin',
          email: 'admin@nidopro.com',
          passwordHash: hashedPassword,
        });
        await userRepository.save(adminUser);
        
        console.log('‚úÖ Usuario administrador creado');
        console.log('üìß Email: admin@nidopro.com');
        console.log('üîë Usuario: admin');
        console.log('üîê Contrase√±a: admin123');
      } else {
        console.log('‚ö†Ô∏è  Usuario administrador ya existe');
      }
    }

    console.log('üéâ Seeds completados exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en seeds:', error);
    throw error;
  }
}